{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p><code>changelog-gen</code> is a CHANGELOG generator intended to remove the mental load of determining correct versioning, while generating changelogs and creating release tags from conventional commit formatted commit messages.</p> <p>Usage of <code>bump-my-version</code> for version management is being deprecated, and brought in to <code>changelog_gen</code> to reduce the dependency chain, and allow more control of versioning.</p> <pre><code>$ git log --oneline\na4e1449 feat: Open changes in editor before confirmation, to allow modification.\nc314b6b feat: Block generation if local/remote are out of sync.\n2e25deb chore: Relax typer version to 0.X\na95fd80 fix: Handle warning message from bump-my-version if setup.cfg exists\nb46d2fe fix: Clean up link generation format in MDWriter\n</code></pre> <p>Using the above commits, can generate the following example changelog entry.</p> <pre><code># Changelog\n\n## v0.9.2 - 2024-03-08\n\n### Features and Improvements\n- Open changes in editor before confirmation, to allow modification. [[#1](https://github.com/NRWLDev/changelog-gen/issues/1)] [[a4e1449](https://github.com/NRWLDev/changelog-gen/commit/a4e1449bf44f370c671cc679d4bf9cfd75e68cbf)]\n- Block generation if local/remote are out of sync. [[#2](https://github.com/NRWLDev/changelog-gen/issues/2)] [[c314b6b](https://github.com/NRWLDev/changelog-gen/commit/c314b6b8a32f4ce5c05869f0accd24bb4e6097f2)]\n\n### Bug fixes\n- Handle warning message from bump-my-version if setup.cfg exists [[a95fd80](https://github.com/NRWLDev/changelog-gen/commit/a95fd80d939985ab4b51a864676dda234e345d47)]\n- Clean up link generation format in MDWriter [[b46d2fe](https://github.com/NRWLDev/changelog-gen/commit/b46d2fe6fba5a170f25dffbf8697868d14a4e73e)]\n\n### Miscellaneous\n- Relax typer version to 0.X [[2e25deb](https://github.com/NRWLDev/changelog-gen/commit/2e25deb902710343a0f85f40323762752eef4a45)]\n</code></pre>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install changelog-gen\n\npip install changelog-gen[legacy]       # legacy bump-my-version support\npip install changelog-gen[post-process] # include httpx support for post-process hooks\n</code></pre>"},{"location":"commits/","title":"Conventional commits","text":"<p>For full details on conventional commits, check out conventional commit.</p>"},{"location":"commits/#commit-messages","title":"Commit messages","text":"<p>At the simplest level they can be achieved in a single line i.e.</p> <pre><code>$ git commit -m 'fix: Handle incorrect user input.'\n</code></pre> <p>Or with a multiline commit message with additional information in the body and the footers, the body is ignored for the purposes of changelog generation, but the footers are taken into account.</p> <pre><code>&lt;type&gt;[(optional scope)][!]: &lt;description&gt;\n\n[optional body]\n\n[optional footer(s)]\n</code></pre> <ul> <li><code>type</code> is used to determining the semantic version related to the change.</li> <li><code>!</code> in the type, or <code>BREAKING CHANGE:</code> in the footer denotes a <code>major</code> release.</li> <li><code>scope</code> is included in the changelog message if provided.</li> <li><code>description</code> allows typical <code>[a-zA-Z ]</code> sentences, as well as <code>[.,/]</code>   punctuation, and <code>[`]</code> for highlighting words. It is also the main   information used in the changelog entry.</li> </ul>"},{"location":"commits/#footers","title":"Footers","text":"<p>Optional footers that are parsed by <code>changelog-gen</code> are:</p> <ul> <li><code>BREAKING CHANGE:[ details]</code></li> <li><code>Refs: [#]&lt;issue_ref&gt;</code></li> <li><code>Authors: (&lt;author&gt;, ...)</code></li> </ul> <p>Parsing additional/custom footers is supported with footer_parsers.</p>"},{"location":"commits/#github-support","title":"Github support","text":"<p>Github makes use of <code>closes #&lt;issue_ref&gt;</code> to close an issue when merged, this footer, along with other custom github footers, can be used to extract the <code>issue_ref</code>.  Github also inserts <code>(#&lt;pull_ref)</code> into merge request titles, if you make use of the title/description when merging, this can be stripped out, and optionally stored in a <code>PR</code> footer.</p> <p>See github configuration for details.</p>"},{"location":"commits/#breaking-changes","title":"Breaking changes","text":"<p>If an <code>!</code> is present in the commit type, or the <code>BREAKING CHANGE</code> footer is present, a major release will be triggered, except in the case of <code>0.x.y</code> where a breaking change will trigger a minor release (as detailed in semantic versioning).</p>"},{"location":"commits/#include-all","title":"Include all","text":"<p>Getting started with conventional commits can take some dedication, and its easy to let some commits slip through the cracks. When generating changelogs the <code>--include-all</code> flag is available to pick up all commits, even those that don't fit the conventional commit format. All non conventional commits will be included under a <code>Miscellaneous</code> heading. Combined with the <code>--interactive</code> flag commits can be included under the correct headings and/or excluded completely.</p>"},{"location":"commits/#extracting-information-and-using-it","title":"Extracting information and using it","text":"<p>To parse information from custom footers check out footer_parsers.</p> <p>By supplying custom regexes that split a footer into the <code>[footer][separator][footer_value]</code> this information can be extracted later on and used to generate links, or to populate the post process url/body.</p>"},{"location":"commits/#information-extraction","title":"Information extraction","text":"<p>Once footers have been parsed, their information can be extracted to support templating links etc.</p> <p>Custom extractors can be defined using named group regexes, for example to extract issue_refs from the footer <code>Refs: #1, #2, #3</code> an extractor <code>#(?P&lt;issue_ref&gt;\\d+),?</code>, would result in the extracted information <code>{\"issue_ref\": [\"1\", \"2\", \"3\"]}</code>.</p> <p>Multiple footers can be extracted using the same group name, and the data will be concatenated together (rather than overwritten) from subsequent extractors.</p>"},{"location":"commits/#links","title":"Links","text":"<p>Once information has been extracted from parsed footers, it can be used to generate links to include in the changelog. See link_generators for information on configuring link generators.</p> <p>In previous releases, <code>changelog-gen</code> only supported <code>issue_link</code> and <code>commit_link</code> configuration. These have been deprecated in favour of link_generators. The same behaviour can be recreated using a link generator.</p> <p>The following toml will generate a link for each extracted issue_ref, and will generate a link using the short_hash and full commit_hash of the raw change object.</p> <pre><code>[[tool.changelog_gen.link_generators]]\nsource = \"issue_ref\"\nlink = \"https://github.com/NRWLDev/changelog-gen/issues/{0}\"\n\n[[tool.changelog_gen.link_generators]]\nsource = \"__change__\"\ntext = \"{0.short_hash}\"\nlink = \"https://github.com/NRWLDev/changelog-gen/commit/{0.commit_hash}\"\n</code></pre> <p>To generate a link for a PR, using the PR footer from the github helpers.</p> <pre><code>[[tool.changelog_gen.extractors]]\nfooter = \"PR\"\npattern = '#(?P&lt;pull_ref&gt;\\d+)'\n\n[[tool.changelog_gen.link_generators]]\nsource = \"pr\"\nlink = \"https://github.com/NRWLDev/changelog-gen/pulls/{0}\"\n</code></pre>"},{"location":"configuration/","title":"Configuration","text":"<p>General configuration is grouped in the <code>[tool.changelog_gen]</code> section of pyproject.toml.</p>"},{"location":"configuration/#simple-configuration","title":"Simple configuration","text":"<pre><code>[tool.changelog_gen]\ncurrent_version = \"1.2.3\"\nreject_empty = true\nallowed_branches = [\n    \"main\",\n]\n\n[[tool.changelog_gen.files]]\nfilename = \"README.md\"\n</code></pre>"},{"location":"configuration/#commit","title":"<code>commit</code>","text":"<p>[optional] default: True</p> <p>Commit changes to the changelog (and configured files) after writing.</p> <p>Also available as <code>--commit/--no-commit</code> (e.g. <code>changelog generate --commit</code>)</p>"},{"location":"configuration/#tag","title":"<code>tag</code>","text":"<p>[optional] default: True</p> <p>Tag the committed changes with the new version.</p> <p>Also available as <code>--tag/--no-tag</code> (e.g. <code>changelog generate --tag</code>)</p>"},{"location":"configuration/#release","title":"<code>release</code>","text":"<p>[optional] default: True</p> <p>Modify version strings in configured files.</p> <p>Also available as <code>--release/--no-release</code> (e.g. <code>changelog generate --release</code>)</p>"},{"location":"configuration/#interactive","title":"<code>interactive</code>","text":"<p>[optional] default: True</p> <p>Open proposed changes in an editor before writing to changelog.</p> <p>Also available as <code>--interactive/--no-interactive</code> (e.g. <code>changelog generate --interactive</code>)</p>"},{"location":"configuration/#allow_dirty","title":"<code>allow_dirty</code>","text":"<p>[optional] default: False</p> <p>Don't abort if the current branch contains uncommitted changes</p> <p>Also available as <code>--allow-dirty</code> (e.g. <code>changelog generate --allow-dirty</code>)</p>"},{"location":"configuration/#allow_missing","title":"<code>allow_missing</code>","text":"<p>[optional] default: False</p> <p>Don't abort if the local and remote branches are out of sync.</p> <p>Also available as <code>--allow-missing</code> (e.g. <code>changelog generate --allow-missing</code>)</p>"},{"location":"configuration/#reject_empty","title":"<code>reject_empty</code>","text":"<p>[optional] default: False</p> <p>Abort if there are no release notes to add to the change log.</p> <p>Also available as <code>--reject-empty</code> (e.g. <code>changelog generate --reject-empty</code>)</p>"},{"location":"configuration/#statistics","title":"<code>statistics</code>","text":"<p>[optional] default: False</p> <p>Output commit message statistics summary to screen after changelog generation.</p> <p>Also available as <code>--statistics</code> (e.g. <code>changelog generate --statistics</code>)</p>"},{"location":"configuration/#version_string","title":"<code>version_string</code>","text":"<p>[optional] default: <code>v{new_version}</code></p> <p>Format for the version tag, this will be passed into changelog, commit   messages, and any post processing.</p> <p>Example:</p> <pre><code>[tool.changelog_gen]\nversion_string = \"{new_version}\"\n</code></pre>"},{"location":"configuration/#date_format","title":"<code>date_format</code>","text":"<p>[optional] default: None</p> <p>Add a date on the version line, use strftime and strptime format   codes.   The format string can include any character, a space is included between the   version tag and the date tag.</p> <p>Also available in cli as <code>--date-format</code> (e.g. <code>--date-format '%Y-%m-%d'</code>).</p> <p>Example:</p> <pre><code>[tool.changelog_gen]\ndate_format = \"on %Y-%m-%d\"\n</code></pre>"},{"location":"configuration/#footer_parsers","title":"<code>footer_parsers</code>","text":"<p>[optional] default: None</p> <p>Define new footer parsers, or override builtin footer parsers (Authors,   Refs). Footer parsers accepts a list of regexes to parse a footer and return   a match with the footer, the separator, and the footer value.</p> <p>Example: <pre><code>[tool.changelog_gen]\nfooter_parsers = [\n    r\"(Refs)(: )(#?[\\w-]+)\",\n    r\"(closes)( )(#[\\w-]+)\",\n    r\"(Authors)(: )(.*)\",\n]\n</code></pre></p>"},{"location":"configuration/#extractors","title":"<code>extractors</code>","text":"<p>[optional] default: None</p> <p>Define parsers to extract information from footers and store them on the   change object. Extractors should used named groups in regex expressions, this   groups are the key to retrieve the information later in link generation or   post processing. Extractors find all matches in a footer, so will be a   list of all matched values. <code>Refs: 1, 2</code> will be parsed as   <code>{\"issue_ref\": [\"1\", \"2\"]}</code> for example.</p> <p>The footer configuration can be a single footer, or a list of related footers.</p> <p>Example:</p> <pre><code>[[tool.changelog_gen.extractors]]\nfooter = \"Refs\"\npattern = '(?P&lt;issue_ref&gt;\\d+)'\n\n[[tool.changelog_gen.extractors]]\nfooter = [\"closes\", \"fixes\"]\npattern = '#(?P&lt;issue_ref&gt;\\d+)'\n</code></pre>"},{"location":"configuration/#link_generators","title":"<code>link_generators</code>","text":"<p>[optional] default: None</p> <p>Make use of extracted information to generate links to different content.   Define an extraction source, provide a regex pattern to extract   information from the footer, and define the link format, optionally define   the link text format. Link text will default to the extracted information.</p> <p>A special source <code>__change__</code> is provided to generate links using information   directly from the change object (namely commit hashes).</p> <p>Where an extraction contains multiple values, a link for each match will be   created. This allows adding links to multiple authors from the Author footer   for example.</p> <p>Example:</p> <pre><code>[[tool.changelog_gen.link_generators]]\nsource = \"issue_ref\"\nlink = \"https://github.com/NRWLDev/changelog-gen/issues/{0}\"\n\n[[tool.changelog_gen.link_generators]]\nsource = \"__change__\"\nlink = \"https://github.com/NRWLDev/changelog-gen/commit/{0.commit_hash}\"\ntext = \"{0.short_hash}\"\n</code></pre>"},{"location":"configuration/#allowed_branches","title":"<code>allowed_branches</code>","text":"<p>[optional] default: None</p> <p>Prevent changelog being generated if the current branch is not in the   supplied list. By default all branches are allowed.</p> <p>Example:</p> <pre><code>[tool.changelog_gen]\nallowed_branches = [\n  \"main\",\n  \"develop\",\n]\n</code></pre>"},{"location":"configuration/#commit_types","title":"<code>commit_types</code>","text":"<p>[optional] default: None</p> <p>Provide new commit types to support, along with the header to group them under   All custom types will default to <code>patch</code> semver as well, to configure   additional types to be treated as <code>minor</code> see   minor_regex</p> <p>Example:</p> <pre><code>[tool.changelog_gen]\ncommit_types = [\n    {\"type\" = \"feat\", \"header\" = \"New Features\"},\n    {\"type\" = \"change\", \"header\" = \"Changes\"},\n    {\"type\" = \"remove\", \"header\" = \"Removals\"},\n    {\"type\" = \"fix\", \"header\" = \"Bugfixes\"},\n]\n</code></pre> <pre><code>Run `changelog config` to see the existing configuration.\n</code></pre>"},{"location":"configuration/#minor_regex","title":"<code>minor_regex</code>","text":"<p>[optional] default: None</p> <p>Provide a new type match regex for which types should be treated as features   and trigger a minor bump.</p> <p>Example:</p> <pre><code>[tool.changelog_gen]\nminor_regex = \"feat|remove\"\n</code></pre> <pre><code>See `changelog config` for the existing configuration.\n</code></pre>"},{"location":"configuration/#hooks","title":"<code>hooks</code>","text":"<p>[optional] default: None</p> <p>Run additional hooks when generating a release, this allows regenerating   automated documentation during release process, for example.</p> <p>Example:</p> <pre><code>[tool.changelog_gen]\nhooks = [\n  \"path.to.module:hook_function\",\n]\n</code></pre>"},{"location":"configuration/#custom","title":"<code>custom</code>","text":"<p>[optional] default: None</p> <p>Arbitrary configuration that can be used in hooks.</p> <p>Example:</p> <pre><code>[tool.changelog_gen.custom]\nkey = \"value\"\na_list = [\"key\", \"key2\"]\n</code></pre>"},{"location":"configuration/#change_template","title":"<code>change_template</code>","text":"<p>[optional] default: None</p> <p>Customise how changelog entries are formatted, uses   Jinja2 formatting.</p> <p>The template will provided with the change object and can render all   extracted information as desired. For readability the template can be split   over multiple lines, it will be flattened before it is rendered to generate a   single line entry.</p> <p>Example:</p> <pre><code>[tool.changelog_gen]\nchange_template = \"\"\"\n-{% if change.scope %} (`{{change.scope}}`){% endif %}\n{% if change.breaking %} **Breaking**{% endif %}\n {{ change.description }}\n{% for footer in change.footers %}{% if footer.footer == \"Authors\"%} {{footer.value}}{% endif %}{% endfor %}\n{% for link in change.links %} [[{{ link.text }}]({{ link.link }})]{% endfor %}\n\"\"\"\n</code></pre> <p>This can be tested using an example commit with the command <pre><code>$ changelog test [COMMITHASH] --template change\n</code></pre></p>"},{"location":"configuration/#release_template","title":"<code>release_template</code>","text":"<p>[optional] default: None</p> <p>Customise how release entries are formatted, uses   Jinja2 formatting.</p> <p>The template will provided with the release version string, and a dictionary   of headers and related changes, changes have a <code>rendered</code> property containing the   output of the configured <code>change_template</code> for that change.</p> <p>Example:</p> <pre><code>\"\"\"\n[tool.changelog_gen]\nrelease_template = \"\"\"## {{ version_string }}\n\n{% for header, changes in group_changes.items() -%}\n### {{ header }}\n\n{% for change in changes -%}\n{{change.rendered}}\n{% endfor %}\n{% endfor %}\n\"\"\"\n</code></pre> <p>This can be tested using an commits since a specific hash with the command <pre><code>$ changelog test [COMMITHASH] --template release\n</code></pre></p>"},{"location":"configuration/#versioning","title":"Versioning","text":"<p>Versioning configuration is very similar to bump-my-version, but with a few simplifications.</p> <p>The default configuration will support the typical semver use case of <code>X.Y.Z</code> version strings.</p>"},{"location":"configuration/#current_version","title":"<code>current_version</code>","text":"<p>[optional] default: None</p> <p>The minimum required configuration to manage versions is the current version,   which can be moved directly from <code>[tool.bumpversion]</code></p> <pre><code>[tool.changelog_gen]\ncurrent_version = \"1.2.3\"\n</code></pre>"},{"location":"configuration/#files","title":"<code>files</code>","text":"<p>[optional] default: None</p> <p>If multiple files have the current version string in them, they can be   configured for replacement.</p> <p>Where the version string can safely be replaced with the default pattern   <code>{version}</code>, use:</p> <pre><code>[[tool.changelog_gen.files]]\nfilename = \"README.md\"\n</code></pre> <p>For files that might contain other version strings that could match and   shouldn't be updated, a search/replace pattern can be configured.</p> <pre><code>[[tool.changelog_gen.files]]\nfilename = \"pyproject.toml\"\npattern = 'version = \"{version}\"'\n</code></pre>"},{"location":"configuration/#pre_release","title":"<code>pre_release</code>","text":"<p>[optional] default: false</p> <p>Allow pre-release flows.</p> <p>Also available as <code>--pre-release/--no-pre-release</code> (e.g. <code>changelog generate --pre-release</code>)</p>"},{"location":"configuration/#pre_release_components","title":"<code>pre_release_components</code>","text":"<p>[optional] default: None</p> <p>Configure which components trigger a pre-release flow.</p> <p>Example:</p> <pre><code>[tool.changelog_gen]\npre_release_components = [\"major\", \"minor\"]\n</code></pre>"},{"location":"configuration/#parser","title":"<code>parser</code>","text":"<p>[optional] default: <code>(?P&lt;major&gt;\\d+)\\.(?P&lt;minor&gt;\\d+)\\.(?P&lt;patch&gt;\\d+)</code></p> <p>The parser is used to extract the existing semver components from the current   version configuration.</p> <p>If you want to support a pre-release flow, configure a parser a new parser for the custom components you require.</p> <p>Example:</p> <pre><code>[tool.changelog_gen]\nparser = '''(?x)\n    (?P&lt;major&gt;0|[1-9]\\d*)\\.\n    (?P&lt;minor&gt;0|[1-9]\\d*)\\.\n    (?P&lt;patch&gt;0|[1-9]\\d*)\n    (?:\n        (?P&lt;pre_l&gt;[a-zA-Z-]+)         # pre-release label\n        (?P&lt;pre_n&gt;0|[1-9]\\d*)         # pre-release version number\n    )?                                # pre-release section is optional\n'''\n</code></pre>"},{"location":"configuration/#serialisers","title":"<code>serialisers</code>","text":"<p>[optional] default: <code>[\"{major}.{minor}.{patch}\"]</code></p> <p>The serialisers should be defined from most greedy to least in the case where   there are optional components.</p> <p>Example:</p> <pre><code>[tool.changelog_gen]\nserialisers = [\n    \"{major}.{minor}.{patch}-{pre_l}{pre_n}\",\n    \"{major}.{minor}.{patch}\",\n]\n</code></pre>"},{"location":"configuration/#parts","title":"<code>parts</code>","text":"<p>[optional] default: None</p> <p>Where custom components have been defined, if a component uses non integer   values the valid values can be defined.</p> <p>When the release component reaches the end of the configured component parts,   the optional components will be dropped.</p> <p>Example:</p> <pre><code>[tool.changelog_gen.parts]\npre_l = [\"dev\", \"rc\"]\n</code></pre>"},{"location":"configuration/#strict","title":"<code>strict</code>","text":"<p>[optional] default: False</p> <p>Enforce strict rules based on SemVer 2.0.0 and error if non conforming parser or   serialisers are configured.</p>"},{"location":"configuration/#github","title":"Github","text":""},{"location":"configuration/#strip_pr_from_description","title":"<code>strip_pr_from_description</code>","text":"<p>[optional] default: False</p> <p>Strip the <code>(#\\d+)</code> from the end of github PR commit descriptions.</p> <p>Example:</p> <pre><code>[tool.changelog_gen.github]\nstrip_pr_from_description = true\n</code></pre>"},{"location":"configuration/#extract_pr_from_description","title":"<code>extract_pr_from_description</code>","text":"<p>[optional] default: False</p> <p>Extract the <code>(#\\d+)</code> from the end of github PR commit descriptions, and track   it as a footer for later extraction and link generation. Creates a <code>PR</code> footer entry.</p> <p>Example:</p> <pre><code>[tool.changelog_gen.github]\nextract_pr_from_description = true\n</code></pre>"},{"location":"configuration/#extract_common_footers","title":"<code>extract_common_footers</code>","text":"<p>[optional] default: False</p> <p>Extract supported keyword footers from github commits, <code>closes #1</code> etc.</p> <p>Supported footers can be found   here.</p> <p>Example:</p> <pre><code>[tool.changelog_gen.github]\nextract_common_footers = true\n</code></pre>"},{"location":"configuration/#post-processing","title":"Post processing","text":""},{"location":"configuration/#post_process","title":"<code>post_process</code>","text":"<p>[optional] default: None</p> <p>Configure a REST API to contact when a release is made</p> <p>See example on below Jira configuration information.</p>"},{"location":"configuration/#post_processlink_generator","title":"<code>post_process.link_generator</code>","text":"<p>[required] default: None   The url to contact.   Can have the placeholders <code>::issue_ref::</code> and `::version::``.</p>"},{"location":"configuration/#post_processverb","title":"<code>post_process.verb</code>","text":"<p>[optional] default: POST   HTTP method to use.</p>"},{"location":"configuration/#post_processbody_template","title":"<code>post_process.body_template</code>","text":"<p>[optional] default: <code>{\"body\": \"Released on {{ version }}\"}</code>   The text to send to the API.   Can have the placeholders   * <code>source</code> (usually the issue ref from the extracted information)   * <code>version</code> the version being released   * Any extracted key from defined extractors that had a match.</p>"},{"location":"configuration/#post_processheaders","title":"<code>post_process.headers</code>","text":"<p>[optional] default: None   Headers dictionary to inject into http requests.</p>"},{"location":"configuration/#post_processauth_type","title":"<code>post_process.auth_type</code>","text":"<p>[optional] default: basic   Auth type to use for post process requests, supported options are <code>basic</code>, <code>aws4</code>, and <code>bearer</code>.</p>"},{"location":"configuration/#post_processauth_env","title":"<code>post_process.auth_env</code>","text":"<p>[optional] default: None   Name of the environment variable to use to extract the basic auth information to contact the API.</p> <ul> <li>For basic auth the content of the variable should be <code>{user}:{api key}</code>.</li> <li>For bearer auth the content of the variable should be <code>{api key}</code>.</li> <li>For signed aws4 auth the content of the variable should be <code>{access_key_id}:{secret_access_key}:{service_name}:{region}</code>.</li> </ul>"},{"location":"configuration/#post-process-example","title":"Post process example","text":"<p>Example to post to JIRA:</p> <pre><code>[tool.changelog_gen.post_process]\nlink_generator.source = \"issue_ref\"\nlink_generator.link = \"https://your-domain.atlassian.net/rest/api/2/issue/ISSUE-{0}/comment\"\nverb = \"POST\"\nbody = '{\"body\": \"Released on {{ version }}\"}'\nauth_env = \"JIRA_AUTH\"\nheaders.\"content-type\" = \"application/json\"\n</code></pre> <p>This assumes an environment variable <code>JIRA_AUTH</code> with the content   <code>user@domain.com:{api_key}</code>.  See   manage-api-tokens-for-your-atlassian-account   to generate a key.</p> <p>For simpler testing of post process flows, the url and auth env can be   provided on the command line as <code>--post-process-url</code> and   <code>--post-process-auth-env</code> (e.g. <code>changelog generate --post-process-url   'http://my-api-url.domain/comment/::issue_ref::' --post-process-auth-env   MY_API_AUTH</code>)</p>"},{"location":"hooks/","title":"Hooks","text":"<p>During the release process, some internal hooks to generate the changelog entry, as well as bumping version files are run, during this step custom hooks can be run as well if there are other steps you need to run as part of a release. A good example of this could be regenerating automated docstring documentation.</p> <p>The hook function format is relatively simple, it takes in the current context, as well as the new version string, and must return a list of the files, if any, that were modified. The new version is provided to allow using the values as parameters if required. The context object provides messaging ability as well as access to the current config object.</p> <p><pre><code>from changelog_gen.context import Context\n\ndef my_hook(context: Context, new: str) -&gt; list[str]:\n    # Perform desired operation\n\n    context.error(\"Display something to the user.\")\n    return [\"/path/to/file1\", \"/path/to/file2\"]\n</code></pre> See hooks for details on configuring custom hooks.</p>"},{"location":"hooks/#context","title":"Context","text":"<p>The context object provides access to the current configuration <code>context.config</code> as well as to convenience methods for outputting information, based on current verbosity settings.</p> <ul> <li>error: Always display</li> <li>warning: Display for -v verbosity or higher</li> <li>info: Display for -vv verbosity or higher</li> <li>debug: Display for -vvv verbosity or higher</li> </ul> <p>The above methods accept a % format string, and <code>*args</code>. i.e. <code>context.error(\"Hello, %s\", \"world\")</code>.  To access the current version, extract it from <code>context.config.current_version</code>.</p>"},{"location":"hooks/#configuration","title":"Configuration","text":"<p>Custom configuration can be accessed  with <code>context.config.custom</code>. This is a dictionary containing all values defined in <code>[tool.changelog_gen.custom]</code>.  See custom for details on providing custom configuration.</p>"},{"location":"hooks/#example","title":"Example","text":"<p>Here is a full example used in another project to generate <code>.md</code> files from docstrings (using pdoc3 library), this will output a <code>module_name/</code>  directory in the local <code>docs/</code> directory containing all modules and submodule <code>.md</code> files.</p> <pre><code>import re\nfrom pathlib import Path\n\nimport pdoc\nfrom changelog_gen.context import Context\n\n\ndef hook(context: Context, _new: str) -&gt; list[str]:\n    output_dir = Path(\"./docs\")\n    modules = [\"module_name\"]\n    pcontext = pdoc.Context()\n\n    modules = [pdoc.Module(mod, context=pcontext) for mod in modules]\n    pdoc.link_inheritance(pcontext)\n\n    def recursive_mds(mod: pdoc.Module) -&gt; pdoc.Module:\n        yield mod\n        for submod in mod.submodules():\n            yield from recursive_mds(submod)\n\n    paths = []\n\n    for mod in modules:\n        for module in recursive_mds(mod):\n            path = re.sub(r\"\\.html$\", \".md\", module.url())\n            out = output_dir / path\n            out.parent.mkdir(exist_ok=True, parents=True)\n            with out.open(\"w\") as f:\n                f.write(module.text())\n            context.info(\"Generated documentation for %s module\", module.name)\n            paths.append(str(out))\n\n    return paths\n</code></pre>"},{"location":"post_process/","title":"Post processing","text":"<p>After a release is generated, all commits that contain an issue reference can be processed to update an external source with details of the version release. This allows issues in jira, notion etc to be updated with the version it was released as a part of.</p> <p>The configured post process link generator can refer to any extracted information, if an extractor matches multiple times, the post process will be called for each match for that change.</p> <p>By default the generated link will be called using a <code>POST</code> request, but the http verb can be changed depending on the service being called, and its requirements. The request body can also be configured with a jinja template, provided at render time will be the <code>version</code> string, the <code>source</code> from the extracted match, and all information extracted via <code>extractors</code>.</p> <p>Optional headers can also be configured.</p>"},{"location":"post_process/#authorization","title":"Authorization","text":"<p>Currently basic auth, bearer tokens, and signed aws4 are supported, but if you find yourself with a usecase that needs a different form of authentication, please raise an issue. To provide authorization, configure an environment key to pull the authorization values from using auth_env</p> <p>For basic auth, the environment variable should be in the format <code>{user}:{api_key}</code>.</p> <p>For bearer auth, the environment variable should be in the format <code>{api_key}</code>.</p> <p>For AWS4 signed auth, the environment variable should be in the format <code>{access_key_id}:{secret_access_key}:{service_name}:{region}</code>.</p>"},{"location":"post_process/#installation","title":"Installation","text":"<p>To use post_process functionality, there are some optional dependencies that need to be installed. Due to the implementation using httpx, post_process is not supported on python3.8.</p> <pre><code>pip install changelog-gen[post-process]\n</code></pre>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#getting-started","title":"Getting started","text":"<p>If you have a project with no changelog currently, run <code>changelog init</code> to generate an empty file.</p> <p>If you have also not generated any releases yet, tag the repository with your current version.  The current version is required to detect the correct semver changes based on your commits.</p> <p>A basic pyproject.toml configuration can be as simple as:</p> <pre><code>[tool.changelog_gen]\ncurrent_version = \"0.0.0\"\n</code></pre>"},{"location":"usage/#generating-changelog","title":"Generating changelog","text":"<p>Run <code>changelog generate</code> to extract commits since the last release and populate the changelog, and create a tagged release.</p> <pre><code># Changelog\n\n## v0.9.2 - 2024-03-08\n\n### Features and Improvements\n- Open changes in editor before confirmation, to allow modification. [[#1](https://github.com/NRWLDev/changelog-gen/issues/1)] [[a4e1449](https://github.com/NRWLDev/changelog-gen/commit/a4e1449bf44f370c671cc679d4bf9cfd75e68cbf)]\n- Block generation if local/remote are out of sync. [[#2](https://github.com/NRWLDev/changelog-gen/issues/2)] [[c314b6b](https://github.com/NRWLDev/changelog-gen/commit/c314b6b8a32f4ce5c05869f0accd24bb4e6097f2)]\n\n### Bug fixes\n- Handle warning message from bump-my-version if setup.cfg exists [[a95fd80](https://github.com/NRWLDev/changelog-gen/commit/a95fd80d939985ab4b51a864676dda234e345d47)]\n- Clean up link generation format in MDWriter [[b46d2fe](https://github.com/NRWLDev/changelog-gen/commit/b46d2fe6fba5a170f25dffbf8697868d14a4e73e)]\n\n### Miscellaneous\n- Relax typer version to 0.X [[2e25deb](https://github.com/NRWLDev/changelog-gen/commit/2e25deb902710343a0f85f40323762752eef4a45)]\n</code></pre> <p>See Configuration for default commit type configuration and how to customize them.</p>"},{"location":"usage/#cli-options-and-toggles","title":"CLI options and toggles","text":"<p>These options allow customising on a per run basis.</p> <ul> <li><code>--version_tag</code> specify the version tag to release.</li> <li><code>--version_part</code> specify the version component to increment.</li> <li><code>--dry-run</code> extract changes and preview the proposed changelog and version   without committing or tagging any changes.</li> <li><code>--include-all</code> Include all commits, even incorrectly formatted ones, useful in combination with <code>--interactive</code>.</li> <li><code>-y, --yes</code> accept proposed changes and commit without previewing, interactive   mode will still be triggered prior to automatic acceptance.</li> <li><code>-v[vv]</code> increase the output verbosity, handy if an error occurs or behaviour   does not appear to match expectations.</li> </ul> <p>The following toggles allow overriding configuration per run.</p> <ul> <li><code>--interactive/--no-interactive</code> toggle configuration to drop into an editor with the proposed   changes, to make any desired adjustments, prior to updating the changelog.</li> <li><code>--allow-dirty/--no-allow-dirty</code> toggle configuration for allowing/rejecting git dirty status.</li> <li><code>--allow-missing/--no-allow-missing</code> toggle configuration for allowing/rejecting missing commits in local/remote.</li> <li><code>--reject-empty/--no-reject-empty</code> toggle configuration for updating configured files.</li> <li><code>--release/--no-release</code> toggle configuration for updating configured files.</li> <li><code>--commit/--no-commit</code> toggle configuration for committing changes.</li> <li><code>--tag/--no-tag</code> toggle configuration for tagging release changes.</li> </ul> <p>See Configuration for additional configuration and cli flags that are available. and how to customize them.</p>"},{"location":"usage/#view-current-configuration","title":"View current configuration","text":"<p>Use <code>changelog config</code> to view the currently configured values, including any system defaults.</p>"},{"location":"version/","title":"Semantic Versioning","text":"<p>At the core of <code>changelog-gen</code> is the version detection and generation logic, check here for details on semantic versioning.</p>"},{"location":"version/#version-generation","title":"Version generation","text":"<p><code>changelog-gen</code> uses conventional commit types and its own configuration to determine what type of release to trigger based on the commits since the last release.</p>"},{"location":"version/#major","title":"Major","text":"<p>Any breaking change will trigger a major release, unless the package is in the initial <code>0.y.z</code> development release. In commit terms, any commit message with a <code>!</code> suffix in the type, or <code>BREAKING CHANGE</code> in the footers is considered a breaking change.</p>"},{"location":"version/#minor","title":"Minor","text":"<p>New features, will trigger a minor release (or patch while in the development release). Feature commits are determined by the <code>feat</code> type, or any other type that has been configured with the semver type of <code>minor</code>. See commit_types for details on custom type configuration.</p>"},{"location":"version/#patch","title":"Patch","text":"<p>All other commit types are treated as <code>patch</code> releases.</p>"},{"location":"version/#typical-release-flow","title":"Typical release flow","text":"<p>The default versioning parser is <code>(?P&lt;major&gt;\\d+)\\.(?P&lt;minor&gt;\\d+)\\.(?P&lt;patch&gt;\\d+)</code>, with the matching serialiser <code>{major}.{minor}.{patch}</code>. This will support the typical semver use case of <code>X.Y.Z</code> version strings.</p>"},{"location":"version/#prerelease-flows","title":"Prerelease flows","text":"<p>If you want to support a pre-release flow, configure a parser, suitable serialisers, and any custom components (non incrementing integers).</p> <pre><code>[tool.changelog_gen]\ncurrent_version = \"0.0.0\"\npre_release = true\nparser = '''(?x)\n    (?P&lt;major&gt;0|[1-9]\\d*)\\.\n    (?P&lt;minor&gt;0|[1-9]\\d*)\\.\n    (?P&lt;patch&gt;0|[1-9]\\d*)\n    (?:\n        (?P&lt;pre_l&gt;[a-zA-Z-]+)         # pre-release label\n        (?P&lt;pre_n&gt;0|[1-9]\\d*)         # pre-release version number\n    )?                                # pre-release section is optional\n'''\nserialisers = [\n    \"{major}.{minor}.{patch}-{pre_l}{pre_n}\",\n    \"{major}.{minor}.{patch}\",\n]\n\nparts.pre_l = [\"dev\", \"rc\"]\n</code></pre> <p>In the above example on creating a major/minor/patch release, the <code>pre_l</code> component will increment to the initial value <code>dev</code>, and <code>pre_n</code> will be 0.</p> <ul> <li><code>0.0.0</code></li> <li><code>0.0.0      \u2192 0.0.1-dev0  [changelog generate]</code></li> <li><code>0.0.1-dev0 \u2192 0.0.1-dev1  [changelog generate --version-part pre_n]</code></li> <li><code>0.0.1-dev1 \u2192 0.0.1-rc0   [changelog generate --version-part pre_l]</code></li> <li><code>0.0.1-rc   \u2192 0.0.1       [changelog generate --version-part pre_l]</code></li> </ul> <p>When the release component reaches the end of the configured component parts, the optional components will be dropped.</p> <p>Prerelease flows are triggered on <code>major</code>, <code>minor</code>, and <code>patch</code> releases. If you only wanted them to occur on major releases, use the pre_release_components configuration.</p> <p>They are also disabled by default, so configure <code>[tool.changelog_gen.pre_release]</code> or use <code>--prerelease</code> override on the command line.</p>"},{"location":"version/#strict-validation","title":"Strict validation","text":"<p>By default, parsers and serialisers that do not strictly adhere to SemVer 2.0.0 are supported, but if you wish, strict validation can be enforced. If enabled the tool will error if an incorrect parser, serialiser or component configuration is provided.</p>"}]}